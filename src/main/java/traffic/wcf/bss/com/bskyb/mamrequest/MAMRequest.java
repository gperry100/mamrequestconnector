package traffic.wcf.bss.com.bskyb.mamrequest;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.1
 * 2015-05-01T09:34:40.368+01:00
 * Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "MAMRequest", 
                  wsdlLocation = "classpath://MAMRequest.wsdl",
                  targetNamespace = "http://BSkyB.com.BSS.WCF.Traffic/MAMRequest") 
public class MAMRequest extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://BSkyB.com.BSS.WCF.Traffic/MAMRequest", "MAMRequest");
    public final static QName BasicHttpBindingIRequest = new QName("http://BSkyB.com.BSS.WCF.Traffic/MAMRequest", "BasicHttpBinding_IRequest");
    static {
    	String path = "file:/Users/perrygil/AnypointStudio/workspace/cxf-client-test/src/main/resources/schema/MAMRequest.wsdl";
        URL url = null;
        
           // url = new URL(path);
        url = MAMRequest.class.getClassLoader().getResource("MAMRequest.wsdl");
           

        if(url == null){
            java.util.logging.Logger.getLogger(MAMRequest.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", path);
        }
        
        WSDL_LOCATION = url;
    }

    public MAMRequest(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MAMRequest(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MAMRequest() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MAMRequest(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MAMRequest(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public MAMRequest(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns IRequest
     */
    @WebEndpoint(name = "BasicHttpBinding_IRequest")
    public IRequest getBasicHttpBindingIRequest() {
        return super.getPort(BasicHttpBindingIRequest, IRequest.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IRequest
     */
    @WebEndpoint(name = "BasicHttpBinding_IRequest")
    public IRequest getBasicHttpBindingIRequest(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingIRequest, IRequest.class, features);
    }

}
